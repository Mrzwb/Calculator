{"version":3,"sources":["context/CalcContext.js","components/button/RoundButton.js","components/panel/CalcPanel.js","components/button/EllipseButton.js","components/input/CalcInput.js","util/CalculateUtils.js","App.js","serviceWorker.js","index.js"],"names":["calculator","value","calculate","val","CalcContext","React","createContext","RoundButton","props","handlePointerDown","bind","event","preventDefault","this","className","Consumer","ref","onPointerDown","onClick","Component","CalcPanel","children","EllipseButton","defaultProps","CalcInput","context","readOnly","contextType","EasyFloat","floatAdd","fa","fb","Big","plus","floatSubtract","minus","floatMultiply","times","floatDivide","div","labels","App","Calculator","calcStack","data","nextStatus","setNextStatus","status","isNextStatus","replace","index","isEmpty","length","isNotEmpty","clear","push","pop","shift","unshift","reduceState","getResult","symbol","firstNum","secondNum","result","concat","current","next","test","search","substr","currentVal","prevVal","console","info","getCalculator","state","setState","Provider","map","label","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.324bc1f1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const calculator = {\r\n    value: '0',\r\n    calculate: (val) => {},\r\n};\r\n\r\nexport const CalcContext = React.createContext(\r\n    calculator\r\n);","import React, { Component } from 'react';\r\nimport './RoundButton.css'\r\nimport { CalcContext } from \"../../context/CalcContext\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RoundButton extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handlePointerDown.bind(this);\r\n    }\r\n\r\n    handlePointerDown(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        const { value } = this.props;\r\n        const className = this.props.className || \"round-button\";\r\n        return <CalcContext.Consumer>\r\n                { ({ calculate }) => (\r\n                    <button className = { className }\r\n                            ref = {this.ref}\r\n                            onPointerDown = { this.handlePointerDown }\r\n                            onClick = { () => calculate(value) }>{ value }</button>\r\n                )}\r\n            </CalcContext.Consumer>\r\n    }\r\n}\r\n\r\nRoundButton.propTypes = {\r\n    value: PropTypes.string,\r\n    className: PropTypes.string\r\n}\r\n\r\nexport default RoundButton;","import React, { Component } from 'react';\r\nimport './CalcPanel.css'\r\n\r\nclass CalcPanel extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"container\">\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalcPanel;","import React, { Component } from 'react';\r\nimport './EllipseButton.css';\r\nimport RoundButton from './RoundButton';\r\n\r\nclass EllipseButton extends Component {\r\n\r\n    static defaultProps = {\r\n        value : '0',\r\n    };\r\n\r\n    render() {\r\n        return <RoundButton className=\"ellipse-button\" value={ this.props.value }/>\r\n    }\r\n\r\n}\r\n\r\nexport default EllipseButton;\r\n","import React, {Component} from 'react';\r\nimport './CalcInput.css';\r\nimport { CalcContext } from '../../context/CalcContext';\r\n\r\nclass CalcInput extends Component {\r\n    render() {\r\n        const { value } = this.context;\r\n        return <input className = \"calc-input\"\r\n                      readOnly = {true}\r\n                      value = {value}/>\r\n    }\r\n}\r\n\r\nCalcInput.contextType  = CalcContext;\r\n\r\nexport default CalcInput;","import { calculator } from '../context/CalcContext';\r\nimport Big from 'big.js/big.mjs';\r\n\r\nexport const EasyFloat = {\r\n\r\n    floatAdd: function(fa, fb) {\r\n        return Big(fa).plus(fb);\r\n    },\r\n\r\n    floatSubtract: function(fa, fb) {\r\n        return Big(fa).minus(fb);\r\n    },\r\n\r\n    floatMultiply: function(fa, fb) {\r\n        return Big(fa).times(fb);\r\n    },\r\n\r\n    floatDivide: function (fa, fb) {\r\n        return Big(fa).div(fb);\r\n    }\r\n}\r\n\r\nexport function getCalculator(){\r\n\r\n    let calcStack = {\r\n\r\n        data: [],\r\n\r\n        nextStatus : false,\r\n\r\n        setNextStatus: function(status) {\r\n          this.nextStatus = status;\r\n        },\r\n\r\n        isNextStatus: function () {\r\n            return this.nextStatus;\r\n        },\r\n\r\n        replace: function(index, value) {\r\n            this.data[index] = value;\r\n        },\r\n\r\n        isEmpty: function() {\r\n            return this.data.length === 0;\r\n        },\r\n\r\n        isNotEmpty: function() {\r\n            return !this.isEmpty();\r\n        },\r\n\r\n        clear: function() {\r\n            this.data = [];\r\n        },\r\n\r\n        push: function(value) {\r\n            this.data.push(value);\r\n        },\r\n\r\n        pop: function() {\r\n            return this.data.pop();\r\n        },\r\n\r\n        shift: function() {\r\n            return this.data.shift();\r\n        },\r\n\r\n        unshift: function(value) {\r\n            this.data.unshift(value);\r\n        }\r\n    };\r\n\r\n    const reduceState = (val) => {\r\n        return { value: val || calculator.value };\r\n    }\r\n\r\n    const getResult = (symbol, firstNum, secondNum) => {\r\n        let result = secondNum;\r\n        switch(symbol) {\r\n            case '+' :\r\n                result = EasyFloat.floatAdd(firstNum, secondNum);\r\n                break;\r\n            case '-':\r\n                result = EasyFloat.floatSubtract(firstNum, secondNum);\r\n                break;\r\n            case 'x':\r\n                result = EasyFloat.floatMultiply(firstNum, secondNum);\r\n                break;\r\n            case '÷':\r\n                result = EasyFloat.floatDivide(firstNum, secondNum);\r\n                break;\r\n            case '%':\r\n                result = EasyFloat.floatDivide(firstNum, 100);\r\n                break;\r\n            default:\r\n        }\r\n\r\n        return ''.concat(result);\r\n    }\r\n\r\n    return {\r\n        calculate: (current, next ) => {\r\n            // 初始值\r\n            let val = calculator.value;\r\n\r\n            // 清零\r\n            if (/AC/.test(next) && current !== '') {\r\n                calcStack.clear();\r\n                return reduceState(val);\r\n            }\r\n\r\n            // 输入小数点\r\n            if (/\\./.test(next) && current.search(/\\./) !== -1) {\r\n                return reduceState(current);\r\n            }\r\n\r\n            // 输入数字或小数点\r\n            if (/[0-9\\\\.]/.test(next)) {\r\n                if (calcStack.isNextStatus()) {\r\n                    current = calculator.value;\r\n                    calcStack.setNextStatus(false);\r\n                }\r\n\r\n                if ('0' === current && '.' !== next) {\r\n                    val = next;\r\n                } else if ('-0' === current && '.' !== next) {\r\n                    val = '-' + next;\r\n                } else {\r\n                    val = current + next;\r\n                }\r\n                return reduceState(val);\r\n            }\r\n\r\n            // 输入正负\r\n            if (/\\+\\/-/.test(next)) {\r\n                val = /^-/.test(current) ? current.substr(1) : '-'.concat(current);\r\n                if (calcStack.isNextStatus()) {\r\n                    calcStack.replace(1,val);\r\n                }\r\n                return reduceState(val);\r\n            }\r\n\r\n            // 百分号\r\n            if (/%/.test(next)) {\r\n                val = getResult('%',current,'');\r\n                if (calcStack.isNextStatus()) {\r\n                    calcStack.replace(1,val);\r\n                }\r\n                return reduceState(val);\r\n            }\r\n\r\n            //  输出操作\r\n            if (/=/.test(next)) {\r\n                if (calcStack.isNotEmpty()) {\r\n                    const currentVal = calcStack.shift();\r\n                    const prevVal = calcStack.shift();\r\n                    const symbol = calcStack.shift();\r\n                    if (calcStack.isNextStatus()) {\r\n                        val = getResult(symbol, prevVal, currentVal);\r\n                        calcStack.push(currentVal)\r\n                    } else {\r\n                        val = getResult(symbol, prevVal, current);\r\n                        calcStack.push(current);\r\n                        calcStack.setNextStatus(true);\r\n                    }\r\n                    calcStack.push(val);\r\n                    calcStack.push(symbol);\r\n\r\n                    console.info(calcStack.data);\r\n                    return reduceState(val);\r\n                }\r\n            }\r\n\r\n            // 输入操作符\r\n            if (/[\\\\+-÷x]/.test(next)) {\r\n                val =  current;\r\n                if (calcStack.isEmpty()) {\r\n                    calcStack.push(current);\r\n                    calcStack.push(current);\r\n                    calcStack.push(next);\r\n                } else {\r\n                    if (!calcStack.isNextStatus()) {                    // 非下一步输入状态, 计算值\r\n                        calcStack.shift();\r\n                        const prevVal = calcStack.shift();\r\n                        const symbol = calcStack.shift();\r\n                        val = getResult(symbol, prevVal, current);\r\n\r\n                        // 计算后的值入栈\r\n                        calcStack.push(current);\r\n                        calcStack.push(val);\r\n                        calcStack.push(next);\r\n\r\n                    } else {\r\n                        const symbol = calcStack.pop();\r\n                        if (symbol !== next) {\r\n                            calcStack.push(next);\r\n                        } else {\r\n                            calcStack.push(symbol);\r\n                        }\r\n                    }\r\n                }\r\n                calcStack.setNextStatus(true);                          //  等待下一步输入\r\n                return reduceState(val);\r\n            }\r\n\r\n            return reduceState(val);\r\n        }\r\n    }\r\n};","import React from 'react';\nimport './App.css';\nimport { RoundButton , CalcPanel, EllipseButton, CalcInput} from './components'\nimport { CalcContext, calculator } from './context/CalcContext';\nimport { getCalculator } from './util/CalculateUtils';\n\nconst labels = [\n    'AC','+/-','%', '÷',\n    '7',  '8', '9', 'x',\n    '4',  '5', '6', '-',\n    '1',  '2', '3', '+',\n    '0',  '.', '='\n];\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const Calculator = getCalculator();\n        this.calculate = (val) => {\n            const result = Calculator.calculate(this.state.value, val);\n            this.setState({...this.state, ...result});\n        }\n        this.state = {\n            value: calculator.value,\n            calculate: this.calculate\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <CalcPanel>\n                    <CalcContext.Provider value = { this.state } >\n                        <CalcInput/>\n                        {\n                            labels.map((label,index) =>\n                                '0' === label ? <EllipseButton key = {`E-${index}`}/>\n                                    : <RoundButton key = {`B-${index}`} value = {label}/>)\n                        }\n                    </CalcContext.Provider>\n                </CalcPanel>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}